//
//  main_0_processor.cpp
//  Game_of_life
//
//  Created by Darren Shan on 2020/2/13.
//  Copyright Â© 2020 Darren Shan. All rights reserved.
//

#include <stdio.h>
#include <iostream>
#include <cmath>
#include <fstream>
#include <sstream>
#include <string>
using namespace std;



//read all the files generated by main_iteration.cpp
void post_read_file(string FileName, int &rows, int &cols, int &p_row, int &p_col,int jump, int *values)
{
    ifstream infile;
    infile.open(FileName);
    if (!infile)
        throw invalid_argument(FileName + " not open! Change the directory of the file!");
    
    infile >> p_row;
    infile >> p_col;
    infile >> rows;
    infile >> cols;
    
    for (int i = 0; i < rows*cols; i++)
    {
        infile >> values[jump+i];
    }
    infile.close();
}

void post_write_file (string outFileName, int rows, int cols, int p_rows, int p_cols,int *values)
{
    ofstream outfile;
    outfile.open(outFileName);
    if (!outfile)
        throw invalid_argument(" " + outFileName + "not open! Change the directory of the file!");

    for (int i = 0; i < rows*cols; i++)
    {
        outfile << values[i] << " ";
        if (i%cols == cols-1) outfile << endl;
    }
    outfile.close();
}

//combine the values from different processors into a single file
void combine_datasets(int procs, int total_rows, int total_cols, int itr, string Filename_in, string Filename_out, string directory)
{
    int * values = new int[total_cols*total_rows];
    int * sorted_values =  new int[total_cols*total_rows];
    
    int p_row(0), p_col(0);
    int * rows = new int [procs];
    int * cols = new int [procs];
    
    int jump = 0;
    for (int i = 0; i<procs; i++)
    {
        string filename;
        filename = directory+Filename_in + to_string(i)+"_"+to_string(itr)+".txt";
        post_read_file(filename, rows[i], cols[i], p_row, p_col, jump, values);
        jump += rows[i]*cols[i];
    }
    
    
    jump = 0;
    int org_row = 0;
    int org_col = 0;
    for (int proc =0; proc<procs; proc++)
    {
        for (int i = 0; i < rows[proc]; i++)
        {
            for (int j = 0; j < cols[proc]; j++)
            {
                sorted_values[(i+org_row)*total_cols+j+org_col] = values[i*cols[proc]+j+jump];
            }
        }
        jump+=cols[proc]*rows[proc];
        if ((proc+1)%p_col==0)
        {
            org_row += rows[proc];
            org_col = 0;
        }
        else
        {
            org_col += cols[proc];
        }
    }
    
    post_write_file(directory+Filename_out, total_rows, total_cols, p_row, p_col, sorted_values);
    
    delete[] rows;
    delete[] cols;
    delete[] values;
    delete[] sorted_values;
    
}

int main()
{
    int p = 4;
    int rows = 36;
    int columns = 36;
    int itr = 40;
    string Filename_in = "testdata_result"; //automatically match .txt afterwards
    
    string directory = "../Game_of_life/testdata/";
    
    for (int i = 0; i<itr; i++)
    {
        string Filename_out = "finaldataabs"+to_string(i)+".txt";
        combine_datasets(p, rows, columns, i, Filename_in, Filename_out, directory);
    }
    
    return 0;
}
